/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package guis;

import model.CustomerModel;
import com.formdev.flatlaf.FlatClientProperties;
import java.io.File;
import java.io.InputStream;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;

import java.util.HashMap;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.BrandModel;
import model.GRNItem;
import model.InvoiceItemModel;
import model.MySQL;

import model.productModel;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author user
 */
public class Billing extends javax.swing.JFrame {

    private Billing billing;
    private productModel pModel;
    private CustomerModel cusModel;
    private static HashMap<String, String> MethodsMap = new HashMap<>();
    HashMap<String, InvoiceItemModel> InvoiceItemMap = new HashMap<>();

    private static String firstName = "";
    private static String lastName = "";

    /**
     * Creates new form Billing
     *
     * @param fName
     * @param lName
     */
    public Billing(String fName, String lName) {
        initComponents();
        generateInvoiceId(5, 300);
        loadPaymentMethods();
        jTextField3.setFocusable(false);
        totalField.setFocusable(false);
        PaymentMethod.setEnabled(false);
        jTextField2.setEnabled(false);
        totalField.setText("0.00");

        firstName = fName;
        lastName = lName;
        updateUserName();
    }

    private void updateUserName() {
        if (!firstName.isEmpty() && !lastName.isEmpty()) {
            EmpName.setText(firstName + " " + lastName);
        } else {
            EmpName.setText("Employee");
        }
    }

    private void generateInvoiceId(int min, int max) {
        int n = (int) (Math.random() * (max - min + 1)) + min;
        String invId = String.format("INV%04d", n);
        INVid.setText(invId);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        billTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        totalField = new javax.swing.JFormattedTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel9 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        checkoutBtn = new javax.swing.JButton();
        ClearAllBtn = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        PaymentMethod = new javax.swing.JComboBox<>();
        deleteRow = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        SelectProductBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        addToTableBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        qtyno = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        INVid = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        EmpName = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(250, 245, 245));

        billTable.setFont(new java.awt.Font("Montserrat", 0, 12)); // NOI18N
        billTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product  ID", "Product Name", "Product Brand", "Quantity", "Price", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(billTable);

        jPanel3.setBackground(new java.awt.Color(250, 234, 211));

        jLabel7.setFont(new java.awt.Font("Montserrat", 0, 14)); // NOI18N
        jLabel7.setText("TOTAL");

        totalField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        totalField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        totalField.setFont(new java.awt.Font("Montserrat", 1, 18)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Montserrat", 0, 14)); // NOI18N
        jLabel8.setText("PAYMENT");

        jTextField2.setFont(new java.awt.Font("Montserrat", 0, 18)); // NOI18N
        jTextField2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField2KeyReleased(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Montserrat", 0, 14)); // NOI18N
        jLabel9.setText("BALANCE");

        jTextField3.setFont(new java.awt.Font("Montserrat", 0, 18)); // NOI18N
        jTextField3.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        checkoutBtn.setBackground(new java.awt.Color(255, 153, 0));
        checkoutBtn.setFont(new java.awt.Font("Montserrat", 1, 16)); // NOI18N
        checkoutBtn.setText("CHECK OUT");
        checkoutBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        checkoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutBtnActionPerformed(evt);
            }
        });

        ClearAllBtn.setFont(new java.awt.Font("Montserrat", 1, 16)); // NOI18N
        ClearAllBtn.setForeground(new java.awt.Color(204, 0, 0));
        ClearAllBtn.setText("CLEAR ALL");
        ClearAllBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 0, 0)));
        ClearAllBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ClearAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearAllBtnActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Montserrat", 0, 14)); // NOI18N
        jLabel14.setText("PAYMENT METHOD");

        PaymentMethod.setFont(new java.awt.Font("Montserrat", 0, 12)); // NOI18N
        PaymentMethod.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        PaymentMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PaymentMethodActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ClearAllBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(checkoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel14)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(PaymentMethod, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel8)
                            .addGap(18, 18, 18)
                            .addComponent(jTextField2))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addGap(41, 41, 41)
                            .addComponent(totalField, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(totalField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(PaymentMethod, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel8))
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(83, 83, 83)
                .addComponent(checkoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ClearAllBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55))
        );

        deleteRow.setFont(new java.awt.Font("Montserrat", 0, 14)); // NOI18N
        deleteRow.setText("Delete Row");
        deleteRow.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deleteRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRowActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 697, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteRow, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteRow, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(228, 226, 226));

        SelectProductBtn.setBackground(new java.awt.Color(218, 125, 8));
        SelectProductBtn.setFont(new java.awt.Font("Montserrat", 1, 14)); // NOI18N
        SelectProductBtn.setForeground(new java.awt.Color(255, 255, 255));
        SelectProductBtn.setText("Select Product");
        SelectProductBtn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        SelectProductBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        SelectProductBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectProductBtnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Montserrat", 0, 14)); // NOI18N
        jLabel3.setText("PRODUCT_NAME");

        jLabel4.setFont(new java.awt.Font("Montserrat", 0, 14)); // NOI18N
        jLabel4.setText("PRODUCT_BRAND");

        jLabel5.setFont(new java.awt.Font("Montserrat", 0, 14)); // NOI18N
        jLabel5.setText("QTY");

        jLabel6.setFont(new java.awt.Font("Montserrat", 0, 14)); // NOI18N
        jLabel6.setText("PRODUCT_ID");

        addToTableBtn.setFont(new java.awt.Font("Montserrat", 0, 14)); // NOI18N
        addToTableBtn.setText("Add to Table");
        addToTableBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addToTableBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToTableBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Montserrat", 1, 12)); // NOI18N
        jLabel1.setText("Product Name");

        jLabel2.setFont(new java.awt.Font("Montserrat", 1, 12)); // NOI18N
        jLabel2.setText("Product ID");

        jLabel10.setFont(new java.awt.Font("Montserrat", 1, 12)); // NOI18N
        jLabel10.setText("Product Brand");

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons8-dashboard-24.png"))); // NOI18N
        jLabel13.setText("Dashboard");
        jLabel13.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel13MouseClicked(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Montserrat", 1, 12)); // NOI18N
        jLabel11.setText("Available Qty :");

        qtyno.setFont(new java.awt.Font("Montserrat", 1, 12)); // NOI18N
        qtyno.setText("-");

        jLabel12.setFont(new java.awt.Font("Montserrat", 1, 12)); // NOI18N
        jLabel12.setText("Invoice ID :");

        INVid.setFont(new java.awt.Font("Montserrat", 3, 24)); // NOI18N
        INVid.setForeground(new java.awt.Color(255, 153, 0));
        INVid.setText("#INVOO1");

        jLabel15.setFont(new java.awt.Font("Montserrat", 1, 12)); // NOI18N
        jLabel15.setText("Employee :");

        EmpName.setFont(new java.awt.Font("Montserrat", 0, 12)); // NOI18N
        EmpName.setText("Employee_Name");

        jLabel16.setFont(new java.awt.Font("Montserrat", 1, 12)); // NOI18N
        jLabel16.setText("Customer :");

        jButton1.setFont(new java.awt.Font("Montserrat", 0, 12)); // NOI18N
        jButton1.setText("Select Customer");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Montserrat", 0, 12)); // NOI18N
        jLabel17.setText("......");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1))
                        .addGap(37, 37, 37)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel6))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel10))
                        .addGap(39, 39, 39)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(qtyno, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(INVid)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)
                        .addGap(118, 118, 118)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(SelectProductBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addToTableBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(EmpName)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel15)
                        .addComponent(EmpName)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel13)
                        .addComponent(jLabel12)
                        .addComponent(INVid)
                        .addComponent(jLabel16)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SelectProductBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addToTableBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addComponent(jLabel10))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel11)
                                            .addComponent(qtyno))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel5))
                                    .addComponent(jLabel4)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(0, 0, 0)
                                        .addComponent(jLabel6))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(0, 0, 0)
                                        .addComponent(jLabel3)))))
                        .addContainerGap(12, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void setSelectedCustomer(CustomerModel customermodel) {

        this.cusModel = customermodel;
        jLabel17.setText(customermodel.getMobile());
        jLabel16.setText(customermodel.getFirst_name() + " " + customermodel.getLast_name() + " :");

    }

    public void setSelectedProduct(productModel productmodel, BrandModel brandmodel) {

        this.pModel = productmodel;
        jLabel3.setText(productmodel.getName());
        jLabel6.setText(productmodel.getId());
        jLabel4.setText(brandmodel.getName());
    }

    public void setQtyData() {
        String pid = jLabel6.getText();
        try {

            ResultSet resultSet = MySQL.executeSearch("SELECT SUM(qty) AS total_qty FROM stock WHERE `stock`.product_id ='" + pid + "'");
            if (resultSet.next()) {
                String totalQty = resultSet.getString("total_qty");
                qtyno.setText(totalQty != null ? totalQty : "0");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadPaymentMethods() {
        try {
            ResultSet resultSet = MySQL.executeSearch("SELECT * FROM payment_method");

            Vector<String> vector = new Vector<>();

            while (resultSet.next()) {
                vector.add(resultSet.getString("name"));
                MethodsMap.put(resultSet.getString("name"), resultSet.getString("id"));
            }

            DefaultComboBoxModel model = new DefaultComboBoxModel(vector);
            PaymentMethod.setModel(model);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void setPriceData() {
        String pid = jLabel6.getText();
        try {
            ResultSet resultSet = MySQL.executeSearch("SELECT price FROM stock WHERE `stock`.product_id ='" + pid + "'");
            if (resultSet.next()) {
                double price = resultSet.getDouble("price");
                int lastRow = billTable.getRowCount() - 1;
                if (lastRow >= 0) {
                    billTable.setValueAt(String.format("%.2f", price), lastRow, 4);
                    calculateTotal(lastRow); // Calculate total for this row
                }
            } else {
                JOptionPane.showMessageDialog(this, "No price found for the selected product.", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading price: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void calculateTotal(int rowIndex) {
        try {
            Object priceObj = billTable.getValueAt(rowIndex, 4);
            Object qtyObj = billTable.getValueAt(rowIndex, 3);

            if (priceObj != null && qtyObj != null) {
                double price = Double.parseDouble(priceObj.toString());
                double qty = Double.parseDouble(qtyObj.toString());
                double total = price * qty;
                billTable.setValueAt(String.format("%.2f", total), rowIndex, 5);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error calculating total: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void updateTotalField() {
        double total = 0.0;
        DefaultTableModel model = (DefaultTableModel) billTable.getModel();

        for (int i = 0; i < model.getRowCount(); i++) {
            Object value = model.getValueAt(i, 5);
            if (value != null) {
                total += Double.parseDouble(value.toString());
            }
        }
        totalField.setValue(total);
    }

    private void calculateBalance() {
        try {
            double total = ((Number) totalField.getValue()).doubleValue();
            double payment = Double.parseDouble(jTextField2.getText());
            double balance = payment - total;
            jTextField3.setText(String.format("%.2f", balance));
        } catch (Exception e) {
            jTextField3.setText("0.00");
        }
    }

    private void checkoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkoutBtnActionPerformed
        try {
            String invoiceNumber = INVid.getText();
            String employeeName = EmpName.getText();
            String paymentMethod = String.valueOf(PaymentMethod.getSelectedItem());
            String date = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
            String paidAmountStr = jTextField2.getText();
            String totalAmountStr = totalField.getText();
            String CustomerMobile = jLabel17.getText();

            if (paidAmountStr.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Enter Payment Amount", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            if (!paidAmountStr.matches("\\d+")) {
                JOptionPane.showMessageDialog(this, "Only enter numbers for payment", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

            ResultSet employeeResultSet = MySQL.executeSearch(
                    "SELECT email FROM employee WHERE CONCAT(first_name, ' ', last_name) = '" + employeeName + "'");
            String employeeEmail = "";
            if (employeeResultSet.next()) {
                employeeEmail = employeeResultSet.getString("email");
            } else {
                JOptionPane.showMessageDialog(this, "Employee not found in the database", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            double paidAmount = Double.parseDouble(paidAmountStr);
            double totalAmount = Double.parseDouble(totalAmountStr);
            double balance = paidAmount - totalAmount;

            if (CustomerMobile.equals("......")) {
                 //insert into invoice without customer mobile
                String paymentMethodId = MethodsMap.get(paymentMethod);
                MySQL.executeIUD("INSERT INTO `invoice` (`id`, `date`, `paid_amount`,`payment_method_id`, `employee_email`,`customer_mobile`,`total`) "
                        + "VALUES ('" + invoiceNumber + "', '" + date + "', '" + paidAmount + "', '"
                        + paymentMethodId + "', '" + employeeEmail + "',null,'" + totalAmount + "')");
            } else {
                //insert into invoice
                String paymentMethodId = MethodsMap.get(paymentMethod);
                MySQL.executeIUD("INSERT INTO `invoice` (`id`, `date`, `paid_amount`,`payment_method_id`, `employee_email`,`customer_mobile`,`total`) "
                        + "VALUES ('" + invoiceNumber + "', '" + date + "', '" + paidAmount + "', '"
                        + paymentMethodId + "', '" + employeeEmail + "','" + CustomerMobile + "','" + totalAmount + "')");
            }

            DefaultTableModel model = (DefaultTableModel) billTable.getModel();
            for (int i = 0; i < model.getRowCount(); i++) {
                String productId = String.valueOf(model.getValueAt(i, 0));
                String qtyStr = String.valueOf(model.getValueAt(i, 3));
                String priceStr = String.valueOf(model.getValueAt(i, 4));

                double qty = Double.parseDouble(qtyStr);
                double price = Double.parseDouble(priceStr);

                // Update stock
                ResultSet stockResultSet = MySQL.executeSearch(
                        "SELECT * FROM `stock` WHERE `product_id` = '" + productId + "' AND `price` = '" + price + "'");
                String stockId = null;

                if (stockResultSet.next()) {
                    stockId = stockResultSet.getString("id");
                    double currentQty = stockResultSet.getDouble("qty");
                    double updatedQty = currentQty - qty;

                    MySQL.executeIUD("UPDATE `stock` SET `qty` = '" + updatedQty + "' WHERE `id` = '" + stockId + "'");
                } else {
                    JOptionPane.showMessageDialog(this, "Stock not found for Product ID: " + productId, "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Insert invoice item
                MySQL.executeIUD("INSERT INTO `invoice_item` ( `qty`,`stock_id`,`invoice_id`) "
                        + "VALUES ('" + qty + "','" + stockId + "','" + invoiceNumber + "')");
            }

            JOptionPane.showMessageDialog(this, "Invoice and items saved successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

            //Report  
            String dateTime = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss aa").format(new Date());
            String headerImg;
            try {
                InputStream s = this.getClass().getResourceAsStream("/reports/apperalBill.jasper");
                String img = new File(this.getClass().getResource("/resources/logo.jpg").getFile()).getAbsolutePath();

                headerImg = img.replace("\\", "/");

                HashMap<String, Object> params = new HashMap<>();
                params.put("img", headerImg);
                params.put("PayMethod", String.valueOf(PaymentMethod.getSelectedItem()));
                params.put("reportDate", dateTime);
                params.put("Total", String.valueOf(totalField.getText()));
                params.put("Payment", String.valueOf(jTextField2.getText()));
                params.put("balance", String.valueOf(jTextField3.getText()));
                JRTableModelDataSource dataSource = new JRTableModelDataSource(billTable.getModel());

                JasperPrint report = JasperFillManager.fillReport(s, params, dataSource);
                JasperViewer.viewReport(report, false);

            } catch (Exception e) {
                e.printStackTrace();
            }
            generateInvoiceId(5, 300);
            clearAll();

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error during checkout: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_checkoutBtnActionPerformed

    private void SelectProductBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectProductBtnActionPerformed
        SelectProducts selectProduct = new SelectProducts(null, true, this);
        selectProduct.setVisible(true);

    }//GEN-LAST:event_SelectProductBtnActionPerformed

    private void jLabel13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel13MouseClicked
        // TODO add your handling code here:
        DashBoard em = new DashBoard();
        em.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jLabel13MouseClicked

    private void addToTableBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToTableBtnActionPerformed
        String Pname = jLabel3.getText();
        String Pid = jLabel6.getText();
        String Pbrand = jLabel4.getText();
        String qtyStr = jTextField1.getText();
        String availableQtyStr = qtyno.getText();
        String CustomerMobile = jLabel17.getText();

        if (qtyStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Enter a Quantity", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (!qtyStr.matches("^\\d+(\\.\\d+)?$")) {
            JOptionPane.showMessageDialog(this, "Please only enter numbers for Quantity", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (Double.parseDouble(qtyStr) <= 0) {
            JOptionPane.showMessageDialog(this, "Please Enter a Valid Quantity", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (Double.parseDouble(qtyStr) > Double.parseDouble(availableQtyStr)) {
            JOptionPane.showMessageDialog(this, "Quantity Can't be Higher than the Available Quantity", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            DefaultTableModel model = (DefaultTableModel) billTable.getModel();
            model.addRow(new Object[]{Pid, Pname, Pbrand, qtyStr, "0.00", "0.00"});
            setPriceData();
            updateTotalField();
            resetInputs();
            PaymentMethod.setEnabled(true);
            jTextField2.setEnabled(true);
        }

    }//GEN-LAST:event_addToTableBtnActionPerformed

//    private void loadInvoiceItems(Vector<InvoiceItemModel> invoiceItems) {
//        DefaultTableModel model = (DefaultTableModel) billTable.getModel();
//        model.setRowCount(0); // Clear existing rows
//
//        for (InvoiceItemModel item : invoiceItems) {
//            model.addRow(new Object[]{item.getProductId(), item.getProductName(), item.getBrandName(), item.getQty()});
//        }
//    }

    private void ClearAllBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearAllBtnActionPerformed
        // TODO add your handling code here:
        int response = JOptionPane.showConfirmDialog(null, "Do you want to reset?", "Confirm",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (response == JOptionPane.YES_OPTION) {
            clearAll();
        }

        generateInvoiceId(5, 300);
    }//GEN-LAST:event_ClearAllBtnActionPerformed

    private void deleteRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRowActionPerformed

        int selectedRow = billTable.getSelectedRow();

        if (selectedRow == -1) {

            JOptionPane.showMessageDialog(this, "Please select a row to delete", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {

            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this row?", "Confirm Deletion", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (confirm == JOptionPane.YES_OPTION) {

                DefaultTableModel model = (DefaultTableModel) billTable.getModel();
                model.removeRow(selectedRow);
                updateTotalField();
                calculateBalance();

                JOptionPane.showMessageDialog(this, "Row deleted successfully", "Information", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_deleteRowActionPerformed

    private void PaymentMethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PaymentMethodActionPerformed

        String selectedMethod = (String) PaymentMethod.getSelectedItem();
        double total = ((Number) totalField.getValue()).doubleValue();

        if ("Card".equals(selectedMethod)) {
            jTextField2.setText(String.format("%.2f", total));
            jTextField2.setFocusable(false);
            jTextField3.setText("0.00");
        } else if ("Cash".equals(selectedMethod)) {
            jTextField2.setText("");
            jTextField2.setFocusable(true);
            jTextField3.setText("0.00");
        }
    }//GEN-LAST:event_PaymentMethodActionPerformed

    private void jTextField2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyReleased
        // TODO add your handling code here:
        if ("Cash".equals(PaymentMethod.getSelectedItem())) {
            calculateBalance();
        }
    }//GEN-LAST:event_jTextField2KeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        SelectCustomers selectCus = new SelectCustomers(null, true, this);
        selectCus.setVisible(true);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void resetInputs() {
        jLabel3.setText("PRODUCT_NAME");
        jLabel6.setText("PRODUCT_ID");
        jLabel4.setText("PRODUCT_BRAND");
        jTextField1.setText("");
        qtyno.setText("-");
    }

    private void clearAll() {
        jLabel3.setText("PRODUCT_NAME");
        jLabel6.setText("PRODUCT_ID");
        jLabel4.setText("PRODUCT_BRAND");
        jTextField1.setText("");
        qtyno.setText("-");
        totalField.setText("");
        jTextField2.setText("");
        jTextField3.setText("");
        totalField.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "0.00 ");
        jTextField2.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "0.00 ");
        jTextField3.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "0.00 ");
        DefaultTableModel dtm = (DefaultTableModel) billTable.getModel();
        dtm.setRowCount(0);
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ClearAllBtn;
    private javax.swing.JLabel EmpName;
    private javax.swing.JLabel INVid;
    private javax.swing.JComboBox<String> PaymentMethod;
    private javax.swing.JButton SelectProductBtn;
    private javax.swing.JButton addToTableBtn;
    private javax.swing.JTable billTable;
    private javax.swing.JButton checkoutBtn;
    private javax.swing.JButton deleteRow;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JLabel qtyno;
    private javax.swing.JFormattedTextField totalField;
    // End of variables declaration//GEN-END:variables
}
